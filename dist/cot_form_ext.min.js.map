{"version":3,"sources":["cot_form_ext.min.js"],"names":["cot_form","prototype","addformfield","fieldDefinition","fieldContainer","call","this","$","prop","validatorOptions","retVal","excluded","CotForm","render","_this","options","arguments","length","undefined","model","setModel","view","setView","preRenderPromises","sections","_definition","sectionIndex","sectionsLength","section","preRender","Function","concat","push","_model","_view","rows","rowIndex","rowsLength","row","fields","fieldIndex","fieldsLength","field","choices","bindTo","type","value","get","map","item","text","indexOf","unshift","Promise","all","then","postRenderPromises","_sectionIndex","_sectionsLength","_section","_rows","_rowIndex","_rowsLength","_row","_fields","_fieldIndex","_fieldsLength","_field"],"mappings":"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","file":"cot_form_ext.min.js","sourcesContent":["\"use strict\";\n\n/* global cot_form CotForm */\n\n/**\n * Extends addforfield method. Includes readOnly option.\n * @argument {object}      fieldDefinition Field form configuration.\n * @argument {htmlElement} fieldContainer  Wrapper element.\n */\ncot_form.prototype.addformfield = function (addformfield) {\n  return function (fieldDefinition, fieldContainer) {\n    addformfield.call(this, fieldDefinition, fieldContainer);\n\n    if (fieldDefinition['readOnly'] === true) {\n      $(':input', $(fieldContainer)).prop('readonly', true);\n    }\n  };\n}(cot_form.prototype.addformfield);\n/**\n * Extends validatorOptions method. Includes exclude field validation.\n * @argument {object} fieldDefinition Field form configuration.\n * @returns {object} formvalidation.io options.\n */\n\n\ncot_form.prototype.validatorOptions = function (validatorOptions) {\n  return function (fieldDefinition) {\n    var retVal = validatorOptions.call(this, fieldDefinition);\n\n    if (fieldDefinition.excluded != null) {\n      retVal.excluded = fieldDefinition.excluded;\n    }\n\n    return retVal;\n  };\n}(cot_form.prototype.validatorOptions);\n/**\n * Extends render method. Executes the new preRender options before the original\n * render method. Add backbone model value if its not present in the choices\n * option. And executes the new postRender options before resolving the returned\n * Promise. Additional options argument is also added to set model and view\n * along with the render call.\n * @argument {string|object}  options                        Form render options. When string type, this behaves like options.target.\n * @argument {object}         options.formValidationSettings Optional. Form validation options.\n * @argument {Backbone.Model} option.model                   Optional. Allows setModel while rendering.\n * @argument {Backbone.View}  option.view                    Optional. Allows setView while rendering.\n * @argument {string}         options.target                 CSS selector pointing to the forms container/wrapper.\n * @return {Promise}\n */\n\n\nCotForm.prototype.render = function (render) {\n  return function () {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (options.model != null) {\n      this.setModel(options.model);\n    }\n\n    if (options.view != null) {\n      this.setView(options.view);\n    }\n\n    var preRenderPromises = [];\n    var sections = this._definition.sections;\n\n    for (var sectionIndex = 0, sectionsLength = sections.length; sectionIndex < sectionsLength; sectionIndex++) {\n      var section = sections[sectionIndex];\n\n      if (typeof section.preRender === 'string') {\n        section.preRender = Function(\"return \".concat(section.preRender))();\n      }\n\n      if (typeof section.preRender === 'function') {\n        preRenderPromises.push(section.preRender(section, this._definition, this._model, this._view));\n      }\n\n      var rows = section.rows;\n\n      for (var rowIndex = 0, rowsLength = rows.length; rowIndex < rowsLength; rowIndex++) {\n        var row = rows[rowIndex];\n\n        if (typeof row.preRender === 'string') {\n          row.preRender = Function(\"return \".concat(row.preRender))();\n        }\n\n        if (typeof row.preRender === 'function') {\n          preRenderPromises.push(row.preRender(row, section, this._definition, this._model, this._view));\n        }\n\n        var fields = row.fields;\n\n        for (var fieldIndex = 0, fieldsLength = fields.length; fieldIndex < fieldsLength; fieldIndex++) {\n          var field = fields[fieldIndex];\n\n          if (field.choices != null && field.bindTo != null && field.type != 'checkbox') {\n            var value = this._model.get(field.bindTo);\n\n            if (value != null) {\n              if (field.choices.map(function (item) {\n                return item.value || item.text;\n              }).indexOf(value) === -1) {\n                field.choices.unshift({\n                  text: value\n                });\n              }\n            }\n          }\n\n          if (typeof field.preRender === 'string') {\n            field.preRender = Function(\"return \".concat(field.preRender))();\n          }\n\n          if (typeof field.preRender === 'function') {\n            preRenderPromises.push(field.preRender(field, row, section, this._definition, this._model, this._view));\n          }\n        }\n      }\n    }\n\n    return Promise.all(preRenderPromises).then(function () {\n      return render.call(_this, options);\n    }).then(function () {\n      var postRenderPromises = [];\n      var sections = _this._definition.sections;\n\n      for (var _sectionIndex = 0, _sectionsLength = sections.length; _sectionIndex < _sectionsLength; _sectionIndex++) {\n        var _section = sections[_sectionIndex];\n\n        if (typeof _section.preRender === 'string') {\n          _section.preRender = Function(\"return \".concat(_section.preRender))();\n        }\n\n        if (typeof _section.preRender === 'function') {\n          postRenderPromises.push(_section.preRender(_section, _this._definition, _this._model, _this._view));\n        }\n\n        var _rows = _section.rows;\n\n        for (var _rowIndex = 0, _rowsLength = _rows.length; _rowIndex < _rowsLength; _rowIndex++) {\n          var _row = _rows[_rowIndex];\n\n          if (typeof _row.preRender === 'string') {\n            _row.preRender = Function(\"return \".concat(_row.preRender))();\n          }\n\n          if (typeof _row.preRender === 'function') {\n            postRenderPromises.push(_row.preRender(_row, _section, _this._definition, _this._model, _this._view));\n          }\n\n          var _fields = _row.fields;\n\n          for (var _fieldIndex = 0, _fieldsLength = _fields.length; _fieldIndex < _fieldsLength; _fieldIndex++) {\n            var _field = _fields[_fieldIndex];\n\n            if (typeof _field.preRender === 'string') {\n              _field.preRender = Function(\"return \".concat(_field.preRender))();\n            }\n\n            if (typeof _field.preRender === 'function') {\n              postRenderPromises.push(_field.preRender(_field, _row, _section, _this._definition, _this._model, _this._view));\n            }\n          }\n        }\n      }\n\n      return Promise.all(postRenderPromises);\n    });\n  };\n}(CotForm.prototype.render);\n/**\n * New method. Sets the form's \"parent\" view. Mainly used by the preRender and\n * postRender configuration options.\n * @argument {Backbone.View} view Backbone View rendering the CoT Form.\n */\n\n\nCotForm.prototype.setView = function (view) {\n  this._view = view;\n};"]}